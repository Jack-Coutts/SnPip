import plotly.express as px
import pandas as pd
import math

pd.set_option("display.max_rows", None, "display.max_columns", None)

nan = ''

input = {('bebG', 'cheG'): {41578: 0.0, 41579: 0.004918472573805876, 41580: 0.006420710177008694, 41581: 0.09062926657352541, 41582: 0.0048950229422269126, 41583: 0.006423486130788634, 41584: 0.15243275903419048, 41585: 0.20883417973306617, 41586: 0.005927566258196475, 41587: 0.1712545419428566, 41588: 0.01803337727176436, 41589: 0.00550834608352965, 41590: 0.0},
    ('bebG', 'esnG'): {41578: nan, 41579: 0.1292597761235986, 41580: 0.09431886022633193, 41581: 0.05858324941405462, 41582: 0.14384233725017428, 41583: 0.023912512132751564, 41584: 0.21471055347835763, 41585: 0.056852502043592525, 41586: 0.3854721170308328, 41587: 0.18915171319190183, 41588: 0.2918557725855631, 41589: 0.3505629128996233, 41590: 0.054257676646328884},
    ('bebG', 'gbrG'): {41578: 0.0, 41579: 0.004158046434699869, 41580: 0.007850442938481679, 41581: 0.0413058395982395, 41582: 0.003393946625415361, 41583: 0.010497915842072693, 41584: 0.03789575071380699, 41585: 0.056585889330172466, 41586: 0.005398971021196802, 41587: 0.05086638371703101, 41588: 0.03709038329801733, 41589: 0.006971016705390099, 41590: 0.012044058847831733},
    ('bebG', 'pelG'): {41578: nan, 41579: 0.04637092291530487, 41580: 0.06394319023255053, 41581: 0.14832313380748263, 41582: 0.041355996209588276, 41583: 0.04072595235560402, 41584: 0.12093125740092132, 41585: 0.26723574459782445, 41586: 0.04758854283660425, 41587: 0.24972659880023207, 41588: 0.04759397870617506, 41589: 0.045832779218776994, 41590: 0.0},
    ('cheG', 'esnG'): {41578: 0.0, 41579: 0.15432523279606683, 41580: 0.13583409226127327, 41581: 0.12498927148794127, 41582: 0.16568633532087904, 41583: 0.06379658784202062, 41584: 0.1488683522452354, 41585: 0.34428044686000653, 41586: 0.4316134822840728, 41587: 0.4031421118692564, 41588: 0.333109210466051, 41589: 0.4053810223056174, 41590: 0.06103221473858864},
    ('cheG', 'gbrG'): {41578: 0.0, 41579: -0.0038704910264498794, 41580: -0.0042727077424135115, 41581: 0.03283332972186202, 41582: 0.0052602866514733825, 41583: -0.004647915050512352, 41584: 0.04683001630025435, 41585: 0.0558846911200583, 41586: 0.0030471985622451984, 41587: 0.10817516129032746, 41588: 0.12021634844652096, 41589: -0.0038472460885514664, 41590: 0.01605249008408078},
    ('cheG', 'pelG'): {41578: 0.0, 41579: 0.08683942273484133, 41580: 0.10245953897485072, 41581: 0.3811345849322272, 41582: 0.07519481385318745, 41583: 0.08524697786360061, 41584: 0.3919074106455074, 41585: 0.6434494826593353, 41586: 0.09388457276855705, 41587: 0.5358304561652808, 41588: 0.05719695115585082, 41589: 0.0886245980071711, 41590: -0.0034482758620689494},
    ('esnG', 'gbrG'): {41578: 0.0, 41579: 0.15529111200238324, 41580: 0.1377311753507171, 41581: 0.11952670231974508, 41582: 0.17309321806728273, 41583: 0.07094720803345579, 41584: 0.16826351935150885, 41585: 0.18650255654773212, 41586: 0.4108160570938171, 41587: 0.3219839875750252, 41588: 0.3480828491078137, 41589: 0.4079336270160075, 41590: 0.05243313417209374},
    ('esnG', 'pelG'): {41578: nan, 41579: 0.06455866980282418, 41580: 0.03366183317184129, 41581: 0.1350998061739126, 41582: 0.07782674561595801, 41583: -0.0027524213389110534, 41584: 0.3548135589339974, 41585: 0.09877621001038976, 41586: 0.25948502568129, 41587: 0.0916719892805439, 41588: 0.1802188609472686, 41589: 0.19581224936060912, 41590: 0.04872192514879574},
    ('gbrG', 'pelG'): {41578: 0.0, 41579: 0.08829592738530803, 41580: 0.10524795327403982, 41581: 0.29582981493571175, 41582: 0.08703764473398724, 41583: 0.09270322545676783, 41584: 0.25745725675999837, 41585: 0.4654851781571703, 41586: 0.07873443662560732, 41587: 0.4605344942598781, 41588: 0.13996329548668018, 41589: 0.09131327785683982, 41590: 0.013572637562673665}
    }



start = 41578000
stop = 41590001
step = 1000
nstep = math.ceil((stop - start)/step)
print(nstep)
print((stop - start))


# NOTE: Converts 200000 to 2M for better legend formating
def strink(num):
    if len(str(num)) <= 5:
        snum = str("{:.4f}".format(num/1000)+'k')
        return snum
    elif len(str(num)) >= 6:
        snum = str("{:.4f}".format(num/1000000)+'M')
        return snum
    else:
        pass


# NOTE: Generates a scatter graph if given a dictionary of values
def FSTscatter(input, start, stop, step):
    # NOTE: Creates the range caterogies
    bounds = [
             (strink(n)+'-'+strink(min(n+step, stop)))
             for n in range(start, stop, step)
             ]
    # NOTE: Creates a list of nested keys from input dict
    ik = []
    for v in input.values():
        for key in v.keys():
            ik.append(key)

    # NOTE: Maps each nested key from the input dict to a boundary
    first = ik[0:nstep]
    keydict = dict(zip(first, bounds))

    # NOTE: Creates df for graph
    df = pd.DataFrame.from_dict(input, orient='index').stack().reset_index()
    df['Pop'] = df[['level_0', 'level_1']].agg('-'.join, axis=1)
    del df['level_0']
    del df['level_1']
    df = df.fillna('')
    df.columns = ['Range', 'FST', 'Pop']
    df['Range'].replace(keydict, inplace=True)

    # NOTE: Sorts the FST values in the df to auto set max axis values
    FST = list(df['FST'])
    FST = [i for i in FST if i != '']
    FST.sort(key=float)
    print(FST)

    # NOTE: plots the scatter graph
    fig = px.scatter(df, x="Pop", y="FST", color="Range",
                     color_discrete_sequence=px.colors.qualitative.Dark24,
                     labels={"Range": "FST Region on Chromosome (bp) ",
                             "Pop": "Population Group",
                             "FST": "FST Value"},
                     title="Hudson FST",
                     animation_frame="Range",
                     animation_group="Pop")
    fig.update_traces(marker=dict(size=12))

    # NOTE: Sets the fonts and layout
    fig.update_layout(font_family="Times New Roman",
                      font_color="Black",
                      title_font_family="Times New Roman",
                      title_font_color="Black",
                      legend={'traceorder': 'reversed'},
                      showlegend=False,
                      yaxis_range=[FST[0] - 0.01, FST[-1] + 0.01])
    fig.add_hline(y=0.12, line_width=2, line_dash="dash", line_color="gray")

    fig.show()


FSTscatter(input, start, stop, step)
